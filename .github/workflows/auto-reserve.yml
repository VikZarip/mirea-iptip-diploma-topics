name: Auto Reserve Topic
on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  reserve:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract form data
        id: extract
        run: |
          BODY=$(cat <<'EOF'
          ${{ github.event.issue.body }}
          EOF
          )
          FIO=$(printf "%s" "$BODY" | awk '/^\s*–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞/{getline; print}' | tr -d '\r')
          GROUP=$(printf "%s" "$BODY" | awk '/^\s*–ì—Ä—É–ø–ø–∞/{getline; print}' | tr -d '\r')
          SLUG=$(printf "%s" "$BODY" | awk '/^\s*–°–ª–∞–≥ —Ç–µ–º—ã/{getline; print}' | tr -d '\r')
          SUPERVISOR=$(printf "%s" "$BODY" | awk '/^\s*–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å/{getline; print}' | tr -d '\r')
          ACCESS=$(printf "%s" "$BODY" | awk '/^\s*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞/{getline; print}' | tr -d '\r')
          echo "fio=$FIO" >> $GITHUB_OUTPUT
          echo "group=$GROUP" >> $GITHUB_OUTPUT
          echo "slug=$SLUG" >> $GITHUB_OUTPUT
          echo "supervisor=$SUPERVISOR" >> $GITHUB_OUTPUT
          echo "access_code=$ACCESS" >> $GITHUB_OUTPUT

      - name: Validate inputs
        id: validate
        continue-on-error: true
        run: |
          SLUG="${{ steps.extract.outputs.slug }}"
          if [ -z "$SLUG" ]; then
            echo "error=empty_slug" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          FILE="diploma-info/topics/${SLUG}.md"
          if [ ! -f "$FILE" ]; then
            echo "error=file_not_found" >> $GITHUB_OUTPUT
            echo "file=$FILE" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–º–∞ —Å–≤–æ–±–æ–¥–Ω–∞
          if grep -qiE '^\*\*–°—Ç–∞—Ç—É—Å:\*\*\s*(–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞|–≤ —Ä–∞–±–æ—Ç–µ|–∑–∞–≤–µ—Ä—à–µ–Ω–∞)' "$FILE"; then
            echo "error=topic_taken" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Handle validation errors
        if: steps.validate.outputs.error != ''
        uses: actions/github-script@v7
        with:
          script: |
            const error = '${{ steps.validate.outputs.error }}';
            let message = '';
            
            if (error === 'empty_slug') {
              message = '‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:** –ù–µ —É–∫–∞–∑–∞–Ω slug —Ç–µ–º—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.';
            } else if (error === 'file_not_found') {
              const file = '${{ steps.validate.outputs.file }}';
              message = `‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:** –¢–µ–º–∞ —Å slug \`${{ steps.extract.outputs.slug }}\` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å slug (–∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ \`.md\`) –≤ –∫–∞—Ç–∞–ª–æ–≥–µ [topics](https://github.com/${{ github.repository }}/tree/main/diploma-info/topics).`;
            } else if (error === 'topic_taken') {
              message = '‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:** –¢–µ–º–∞ **—É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞** –¥—Ä—É–≥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–∑ [–∫–∞—Ç–∞–ª–æ–≥–∞](https://github.com/${{ github.repository }}/tree/main/diploma-info/topics) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–°–≤–æ–±–æ–¥–Ω–æ".';
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed',
              state_reason: 'not_planned'
            });
            
            core.setFailed(`Validation failed: ${error}`);

      - name: Check access code
        if: steps.validate.outputs.success == 'true'
        uses: actions/github-script@v7
        env:
          ACCESS_CODE: ${{ steps.extract.outputs.access_code }}
          SECRET_CODE: ${{ secrets.RESERVE_CODE }}
        with:
          script: |
            const access = process.env.ACCESS_CODE?.trim();
            const secret = process.env.SECRET_CODE?.trim();
            
            if (!secret) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:** –°–µ–∫—Ä–µ—Ç `RESERVE_CODE` –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.'
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              core.setFailed('–°–µ–∫—Ä–µ—Ç RESERVE_CODE –Ω–µ –∑–∞–¥–∞–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.');
              return;
            }
            
            if (access !== secret) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:** –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ —Ç–µ–º—ã.'
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              core.setFailed('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.');
            }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Reserve topic in markdown
        env:
          FILE_PATH: diploma-info/topics/${{ steps.extract.outputs.slug }}.md
          FIO: ${{ steps.extract.outputs.fio }}
          GROUP: ${{ steps.extract.outputs.group }}
          SUPERVISOR: ${{ steps.extract.outputs.supervisor }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = process.env.FILE_PATH;
          let s = fs.readFileSync(path, 'utf8');

          // 1) –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞
          s = s.replace(/(\*\*–°—Ç–∞—Ç—É—Å:\*\*)\s*–°–≤–æ–±–æ–¥–Ω–æ/i, '$1 –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞');

          // 2) –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –Ω–µ—Ç
          if (!/##\s*–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã/i.test(s)) {
            s += '\n## –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã\n\n';
          }

          const today = new Date().toISOString().slice(0,10);
          const fio = (process.env.FIO || '–°—Ç—É–¥–µ–Ω—Ç').trim();
          const group = (process.env.GROUP || '').trim();
          const sup = (process.env.SUPERVISOR || '–ó–∞—Ä–∏–ø–æ–≤–∞ –í.–ú.').trim();

          // 3) –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å: –§–ò–û (–ì—Ä—É–ø–ø–∞) ‚Äî –¥–∞—Ç–∞ ‚Äî –Ω–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
          const entry = group ? `- **${fio}** (${group}) ‚Äî ${today} ‚Äî ${sup}\n` : `- **${fio}** ‚Äî ${today} ‚Äî ${sup}\n`;
          s = s.replace(/(##\s*–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã[\s\S]*?)$/i, `$1${entry}\n`);

          fs.writeFileSync(path, s, 'utf8');
          NODE

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Auto-reserve: ${{ steps.extract.outputs.slug }} via issue #${{ github.event.issue.number }}" || echo "Nothing to commit"
          git push

      - name: Notify success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const slug = '${{ steps.extract.outputs.slug }}';
            const fio = '${{ steps.extract.outputs.fio }}';
            const group = '${{ steps.extract.outputs.group }}';
            const supervisor = '${{ steps.extract.outputs.supervisor }}';
            
            const studentInfo = group ? `${fio} (${group})` : fio;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚úÖ **–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n**–°—Ç—É–¥–µ–Ω—Ç:** ${studentInfo}\n**–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:** ${supervisor}\n**–¢–µ–º–∞:** [\`${slug}\`](https://github.com/${{ github.repository }}/blob/main/diploma-info/topics/${slug}.md)\n\n---\n\n### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n1. –ò–∑—É—á–∏—Ç–µ [–≥–∞–π–¥—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∏–ø–ª–æ–º–∞](https://github.com/${{ github.repository }}/tree/main/diploma-info/guides)\n2. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Ä–∞–±–æ—Ç—ã](https://github.com/${{ github.repository }}/blob/main/diploma-info/guides/README.md#—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π-–ø–æ—Ä—è–¥–æ–∫-–∏–∑—É—á–µ–Ω–∏—è)\n3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n4. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—É—á–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n–£–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –¥–∏–ø–ª–æ–º–æ–º! üéì`
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed',
              state_reason: 'completed'
            });
